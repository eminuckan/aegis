using System.Text;
using System.Text.Json;
using SyncPermissions.Models;

namespace SyncPermissions.Services;

public interface ICSharpGeneratorService
{
    Task<bool> GenerateCSharpFileAsync(PermissionDiscoveryResult result, ScanOptions options, AppConfig config);
    Task<bool> ShouldGenerateCSharpFileAsync(ScanOptions options, AppConfig config);
    string GetCSharpFilePath(ScanOptions options, AppConfig config);
}

public class CSharpGeneratorService : ICSharpGeneratorService
{
    private readonly IConsoleUIService _consoleUI;

    public CSharpGeneratorService(IConsoleUIService consoleUI)
    {
        _consoleUI = consoleUI;
    }

    public async Task<bool> ShouldGenerateCSharpFileAsync(ScanOptions options, AppConfig config)
    {
        // Eğer config'de true ise direk oluştur
        if (config.SyncPermissions.GenerateCSharpFile)
        {
            return true;
        }

        // Eğer JSON oluşturuluyorsa ve config'de false ise kullanıcıya sor
        if (!string.IsNullOrEmpty(options.OutputFile))
        {
            return _consoleUI.PromptGenerateCSharpFile();
        }

        return false;
    }

    public string GetCSharpFilePath(ScanOptions options, AppConfig config)
    {
        var fileName = config.SyncPermissions.CSharpFileName ?? "AppPermissions.cs";
        
        // JSON ile aynı dizinde oluştur
        if (!string.IsNullOrEmpty(options.OutputFile))
        {
            var directory = Path.GetDirectoryName(options.OutputFile) ?? Directory.GetCurrentDirectory();
            return Path.Combine(directory, fileName);
        }

        // Fallback: current directory
        return Path.Combine(Directory.GetCurrentDirectory(), fileName);
    }

    public async Task<bool> GenerateCSharpFileAsync(PermissionDiscoveryResult result, ScanOptions options, AppConfig config)
    {
        try
        {
            var filePath = GetCSharpFilePath(options, config);
            var namespaceName = config.SyncPermissions.CSharpNamespace ?? "Application.Constants";
            
            // Permission'ları grupla ve metadata'ları birleştir
            var groupedPermissions = GroupPermissions(result);

            // C# kod oluştur
            var csharpCode = GenerateCSharpCode(groupedPermissions, namespaceName, result);

            // Dosyayı yaz
            await File.WriteAllTextAsync(filePath, csharpCode);

            _consoleUI.ShowSuccess($"✅ C# permissions file generated: {filePath}");
            return true;
        }
        catch (Exception ex)
        {
            _consoleUI.ShowError($"Failed to generate C# file: {ex.Message}");
            return false;
        }
    }

    private List<GroupedPermission> GroupPermissions(PermissionDiscoveryResult result)
    {
        // Tüm permission'ları topla
        var allPermissions = new List<DiscoveredPermission>();
        foreach (var project in result.Projects)
        {
            allPermissions.AddRange(project.DiscoveredPermissions);
        }

        // Permission name'e göre grupla
        var grouped = allPermissions
            .GroupBy(p => p.Name)
            .Select(group => new GroupedPermission
            {
                Name = group.Key,
                Description = group.First().Description,
                Resource = GetResourceFromName(group.Key),
                Action = GetActionFromName(group.Key),
                Endpoints = group.Select(p => new EndpointMetadata
                {
                    HttpMethod = p.Metadata.HttpMethod,
                    Route = p.Metadata.Route,
                    Project = p.Metadata.Project
                }).ToList()
            })
            .OrderBy(p => p.Resource)
            .ThenBy(p => p.Action)
            .ToList();

        return grouped;
    }

    private string GenerateCSharpCode(List<GroupedPermission> permissions, string namespaceName, PermissionDiscoveryResult result)
    {
        var sb = new StringBuilder();

        // File header
        sb.AppendLine("// This file was auto-generated by AEGIS");
        sb.AppendLine($"// Generated at: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC");
        sb.AppendLine($"// Tool Version: {result.ToolVersion}");
        sb.AppendLine("// Do not modify this file manually");
        sb.AppendLine();

        // Using statements
        sb.AppendLine("using System.Collections.ObjectModel;");
        sb.AppendLine("using System.Text.Json;");
        sb.AppendLine();

        // Namespace
        sb.AppendLine($"namespace {namespaceName};");
        sb.AppendLine();

        // Record definitions
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Metadata for a single endpoint");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("public record EndpointMetadata(string HttpMethod, string Route, string Project);");
        sb.AppendLine();

        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// A permission with its associated endpoints");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("public record PermissionInfo(string Name, string Description, string Resource, string Action, IReadOnlyList<EndpointMetadata> Endpoints)");
        sb.AppendLine("{");
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Total number of endpoints using this permission");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public int EndpointCount => Endpoints.Count;");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// All projects that use this permission");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public IReadOnlyList<string> Projects => Endpoints.Select(e => e.Project).Distinct().ToList().AsReadOnly();");
        sb.AppendLine("}");
        sb.AppendLine();

        // Main class
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Auto-generated permissions class containing all discovered permissions");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("public static class AppPermissions");
        sb.AppendLine("{");

        // Resource-based permission constants - organized by resource
        foreach (var resourceGroup in permissions.GroupBy(p => p.Resource).OrderBy(g => g.Key))
        {
            var resourceName = resourceGroup.Key.ToUpperInvariant();
            var resourcePermissions = resourceGroup.OrderBy(p => p.Action).ToList();
            
            sb.AppendLine("    /// <summary>");
            sb.AppendLine($"    /// {resourceGroup.Key} permissions");
            sb.AppendLine("    /// </summary>");
            sb.AppendLine($"    public static class {resourceName}");
            sb.AppendLine("    {");

            foreach (var permission in resourcePermissions)
            {
                var actionName = permission.Action.ToUpperInvariant();
                sb.AppendLine($"        /// <summary>");
                sb.AppendLine($"        /// {permission.Description} ({permission.Endpoints.Count} endpoint{(permission.Endpoints.Count > 1 ? "s" : "")})");
                sb.AppendLine($"        /// </summary>");
                sb.AppendLine($"        public const string {actionName} = \"{permission.Name}\";");
                sb.AppendLine();
            }

            sb.AppendLine("    }");
            sb.AppendLine();
        }
        sb.AppendLine();

        // Resources class
        var resources = permissions.Select(p => p.Resource).Distinct().OrderBy(r => r).ToList();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Resource names");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public static class Resources");
        sb.AppendLine("    {");

        foreach (var resource in resources)
        {
            var constantName = resource.ToUpperInvariant();
            var resourcePermissions = permissions.Where(p => p.Resource == resource).ToList();
            sb.AppendLine($"        /// <summary>");
            sb.AppendLine($"        /// {resource} resource ({resourcePermissions.Count} permission{(resourcePermissions.Count > 1 ? "s" : "")})");
            sb.AppendLine($"        /// </summary>");
            sb.AppendLine($"        public const string {constantName} = \"{resource}\";");
            sb.AppendLine();
        }

        sb.AppendLine("    }");
        sb.AppendLine();

        // Actions class
        var actions = permissions.Select(p => p.Action).Distinct().OrderBy(a => a).ToList();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Action names");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public static class Actions");
        sb.AppendLine("    {");

        foreach (var action in actions)
        {
            var constantName = action.ToUpperInvariant();
            var actionPermissions = permissions.Where(p => p.Action == action).ToList();
            sb.AppendLine($"        /// <summary>");
            sb.AppendLine($"        /// {action} action ({actionPermissions.Count} permission{(actionPermissions.Count > 1 ? "s" : "")})");
            sb.AppendLine($"        /// </summary>");
            sb.AppendLine($"        public const string {constantName} = \"{action}\";");
            sb.AppendLine();
        }

        sb.AppendLine("    }");
        sb.AppendLine();

        // All permissions property
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// All discovered permissions with their metadata");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public static IReadOnlyList<PermissionInfo> All { get; } = new ReadOnlyCollection<PermissionInfo>(new[]");
        sb.AppendLine("    {");

        foreach (var permission in permissions)
        {
            sb.AppendLine($"        new PermissionInfo(");
            sb.AppendLine($"            Name: \"{permission.Name}\",");
            sb.AppendLine($"            Description: \"{permission.Description}\",");
            sb.AppendLine($"            Resource: \"{permission.Resource}\",");
            sb.AppendLine($"            Action: \"{permission.Action}\",");
            sb.AppendLine($"            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]");
            sb.AppendLine($"            {{");

            foreach (var endpoint in permission.Endpoints)
            {
                sb.AppendLine($"                new EndpointMetadata(\"{endpoint.HttpMethod}\", \"{endpoint.Route}\", \"{endpoint.Project}\"),");
            }

            sb.AppendLine($"            }})),");
        }

        sb.AppendLine("    });");
        sb.AppendLine();

        // Helper methods
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Get all permissions for a specific resource");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public static IReadOnlyList<PermissionInfo> GetByResource(string resource)");
        sb.AppendLine("        => All.Where(p => p.Resource.Equals(resource, StringComparison.OrdinalIgnoreCase)).ToList().AsReadOnly();");
        sb.AppendLine();

        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Get all permissions for a specific action");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public static IReadOnlyList<PermissionInfo> GetByAction(string action)");
        sb.AppendLine("        => All.Where(p => p.Action.Equals(action, StringComparison.OrdinalIgnoreCase)).ToList().AsReadOnly();");
        sb.AppendLine();

        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Get all permissions for a specific project");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public static IReadOnlyList<PermissionInfo> GetByProject(string project)");
        sb.AppendLine("        => All.Where(p => p.Endpoints.Any(e => e.Project.Equals(project, StringComparison.OrdinalIgnoreCase))).ToList().AsReadOnly();");
        sb.AppendLine();

        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Check if a permission exists");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public static bool Exists(string permissionName)");
        sb.AppendLine("        => All.Any(p => p.Name.Equals(permissionName, StringComparison.OrdinalIgnoreCase));");
        sb.AppendLine();

        // Statistics
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Permission statistics");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public static class Statistics");
        sb.AppendLine("    {");
        sb.AppendLine($"        /// <summary>Total number of permissions</summary>");
        sb.AppendLine($"        public const int TotalPermissions = {permissions.Count};");
        sb.AppendLine();
        sb.AppendLine($"        /// <summary>Total number of unique resources</summary>");
        sb.AppendLine($"        public const int TotalResources = {resources.Count};");
        sb.AppendLine();
        sb.AppendLine($"        /// <summary>Total number of unique actions</summary>");
        sb.AppendLine($"        public const int TotalActions = {actions.Count};");
        sb.AppendLine();
        sb.AppendLine($"        /// <summary>Total number of endpoints</summary>");
        sb.AppendLine($"        public static int TotalEndpoints => All.Sum(p => p.EndpointCount);");
        sb.AppendLine();
        sb.AppendLine($"        /// <summary>Generation timestamp</summary>");
        sb.AppendLine($"        public static readonly DateTime GeneratedAt = DateTime.Parse(\"{DateTime.UtcNow:yyyy-MM-dd HH:mm:ss}\").ToUniversalTime();");
        sb.AppendLine("    }");

        sb.AppendLine("}");

        return sb.ToString();
    }

    private string GetResourceFromName(string permissionName)
    {
        var parts = permissionName.Split('.');
        return parts.Length > 0 ? parts[0] : string.Empty;
    }

    private string GetActionFromName(string permissionName)
    {
        var parts = permissionName.Split('.');
        return parts.Length > 1 ? parts[1] : string.Empty;
    }
}

public class GroupedPermission
{
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public string Resource { get; set; } = string.Empty;
    public string Action { get; set; } = string.Empty;
    public List<EndpointMetadata> Endpoints { get; set; } = new();
}

public class EndpointMetadata
{
    public string HttpMethod { get; set; } = string.Empty;
    public string Route { get; set; } = string.Empty;
    public string Project { get; set; } = string.Empty;
} 