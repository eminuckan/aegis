// This file was auto-generated by AEGIS
// Generated at: 2025-07-12 17:15:57 UTC
// Tool Version: 1.0.0
// Do not modify this file manually

using System.Collections.ObjectModel;
using System.Text.Json;

namespace Application.Constants;

/// <summary>
/// Metadata for a single endpoint
/// </summary>
public record EndpointMetadata(string HttpMethod, string Route, string Project);

/// <summary>
/// A permission with its associated endpoints
/// </summary>
public record PermissionInfo(string Name, string Description, string Resource, string Action, IReadOnlyList<EndpointMetadata> Endpoints)
{
    /// <summary>
    /// Total number of endpoints using this permission
    /// </summary>
    public int EndpointCount => Endpoints.Count;

    /// <summary>
    /// All projects that use this permission
    /// </summary>
    public IReadOnlyList<string> Projects => Endpoints.Select(e => e.Project).Distinct().ToList().AsReadOnly();
}

/// <summary>
/// Auto-generated permissions class containing all discovered permissions
/// </summary>
public static class AppPermissions
{
    /// <summary>
    /// Individual permission names as constants
    /// </summary>
    public static class Names
    {
        /// <summary>
        /// Create clients permission (1 endpoint)
        /// </summary>
        public const string CLİENTS_CREATE = "Clients.Create";

        /// <summary>
        /// Read clients permission (2 endpoints)
        /// </summary>
        public const string CLİENTS_READ = "Clients.Read";

        /// <summary>
        /// Create emails permission (1 endpoint)
        /// </summary>
        public const string EMAİLS_CREATE = "Emails.Create";

        /// <summary>
        /// Read emails permission (2 endpoints)
        /// </summary>
        public const string EMAİLS_READ = "Emails.Read";

        /// <summary>
        /// Read health permission (1 endpoint)
        /// </summary>
        public const string HEALTH_READ = "Health.Read";

        /// <summary>
        /// Create permissions permission (1 endpoint)
        /// </summary>
        public const string PERMİSSİONS_CREATE = "Permissions.Create";

        /// <summary>
        /// Read permissions permission (1 endpoint)
        /// </summary>
        public const string PERMİSSİONS_READ = "Permissions.Read";

        /// <summary>
        /// Create roles permission (2 endpoints)
        /// </summary>
        public const string ROLES_CREATE = "Roles.Create";

        /// <summary>
        /// Delete roles permission (2 endpoints)
        /// </summary>
        public const string ROLES_DELETE = "Roles.Delete";

        /// <summary>
        /// Read roles permission (4 endpoints)
        /// </summary>
        public const string ROLES_READ = "Roles.Read";

        /// <summary>
        /// Update roles permission (1 endpoint)
        /// </summary>
        public const string ROLES_UPDATE = "Roles.Update";

        /// <summary>
        /// Create sms permission (1 endpoint)
        /// </summary>
        public const string SMS_CREATE = "Sms.Create";

        /// <summary>
        /// Read sms permission (2 endpoints)
        /// </summary>
        public const string SMS_READ = "Sms.Read";

        /// <summary>
        /// Create templates permission (1 endpoint)
        /// </summary>
        public const string TEMPLATES_CREATE = "Templates.Create";

        /// <summary>
        /// Read templates permission (2 endpoints)
        /// </summary>
        public const string TEMPLATES_READ = "Templates.Read";

        /// <summary>
        /// Create tenantınvitations permission (2 endpoints)
        /// </summary>
        public const string TENANTINVİTATİONS_CREATE = "TenantInvitations.Create";

        /// <summary>
        /// Delete tenantınvitations permission (1 endpoint)
        /// </summary>
        public const string TENANTINVİTATİONS_DELETE = "TenantInvitations.Delete";

        /// <summary>
        /// Read tenantınvitations permission (1 endpoint)
        /// </summary>
        public const string TENANTINVİTATİONS_READ = "TenantInvitations.Read";

        /// <summary>
        /// Create tenants permission (1 endpoint)
        /// </summary>
        public const string TENANTS_CREATE = "Tenants.Create";

        /// <summary>
        /// Delete tenants permission (1 endpoint)
        /// </summary>
        public const string TENANTS_DELETE = "Tenants.Delete";

        /// <summary>
        /// Read tenants permission (2 endpoints)
        /// </summary>
        public const string TENANTS_READ = "Tenants.Read";

        /// <summary>
        /// Update tenants permission (1 endpoint)
        /// </summary>
        public const string TENANTS_UPDATE = "Tenants.Update";

        /// <summary>
        /// Read tenantsettings permission (1 endpoint)
        /// </summary>
        public const string TENANTSETTİNGS_READ = "TenantSettings.Read";

        /// <summary>
        /// Update tenantsettings permission (1 endpoint)
        /// </summary>
        public const string TENANTSETTİNGS_UPDATE = "TenantSettings.Update";

        /// <summary>
        /// Create userprofiles permission (1 endpoint)
        /// </summary>
        public const string USERPROFİLES_CREATE = "UserProfiles.Create";

        /// <summary>
        /// Read userprofiles permission (1 endpoint)
        /// </summary>
        public const string USERPROFİLES_READ = "UserProfiles.Read";

        /// <summary>
        /// Update userprofiles permission (1 endpoint)
        /// </summary>
        public const string USERPROFİLES_UPDATE = "UserProfiles.Update";

        /// <summary>
        /// Create users permission (3 endpoints)
        /// </summary>
        public const string USERS_CREATE = "Users.Create";

        /// <summary>
        /// Delete users permission (1 endpoint)
        /// </summary>
        public const string USERS_DELETE = "Users.Delete";

        /// <summary>
        /// Read users permission (1 endpoint)
        /// </summary>
        public const string USERS_READ = "Users.Read";

        /// <summary>
        /// Update users permission (1 endpoint)
        /// </summary>
        public const string USERS_UPDATE = "Users.Update";

    }

    /// <summary>
    /// Resource names
    /// </summary>
    public static class Resources
    {
        /// <summary>
        /// Clients resource (2 permissions)
        /// </summary>
        public const string CLİENTS = "Clients";

        /// <summary>
        /// Emails resource (2 permissions)
        /// </summary>
        public const string EMAİLS = "Emails";

        /// <summary>
        /// Health resource (1 permission)
        /// </summary>
        public const string HEALTH = "Health";

        /// <summary>
        /// Permissions resource (2 permissions)
        /// </summary>
        public const string PERMİSSİONS = "Permissions";

        /// <summary>
        /// Roles resource (4 permissions)
        /// </summary>
        public const string ROLES = "Roles";

        /// <summary>
        /// Sms resource (2 permissions)
        /// </summary>
        public const string SMS = "Sms";

        /// <summary>
        /// Templates resource (2 permissions)
        /// </summary>
        public const string TEMPLATES = "Templates";

        /// <summary>
        /// TenantInvitations resource (3 permissions)
        /// </summary>
        public const string TENANTINVİTATİONS = "TenantInvitations";

        /// <summary>
        /// Tenants resource (4 permissions)
        /// </summary>
        public const string TENANTS = "Tenants";

        /// <summary>
        /// TenantSettings resource (2 permissions)
        /// </summary>
        public const string TENANTSETTİNGS = "TenantSettings";

        /// <summary>
        /// UserProfiles resource (3 permissions)
        /// </summary>
        public const string USERPROFİLES = "UserProfiles";

        /// <summary>
        /// Users resource (4 permissions)
        /// </summary>
        public const string USERS = "Users";

    }

    /// <summary>
    /// Action names
    /// </summary>
    public static class Actions
    {
        /// <summary>
        /// Create action (10 permissions)
        /// </summary>
        public const string CREATE = "Create";

        /// <summary>
        /// Delete action (4 permissions)
        /// </summary>
        public const string DELETE = "Delete";

        /// <summary>
        /// Read action (12 permissions)
        /// </summary>
        public const string READ = "Read";

        /// <summary>
        /// Update action (5 permissions)
        /// </summary>
        public const string UPDATE = "Update";

    }

    /// <summary>
    /// All discovered permissions with their metadata
    /// </summary>
    public static IReadOnlyList<PermissionInfo> All { get; } = new ReadOnlyCollection<PermissionInfo>(new[]
    {
        new PermissionInfo(
            Name: "Clients.Create",
            Description: "Create clients permission",
            Resource: "Clients",
            Action: "Create",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("POST", "/api/v1/clients", "Auth.Api"),
            })),
        new PermissionInfo(
            Name: "Clients.Read",
            Description: "Read clients permission",
            Resource: "Clients",
            Action: "Read",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("GET", "/api/v1/clients/{clientAppId}", "Auth.Api"),
                new EndpointMetadata("GET", "/api/v1/clients", "Auth.Api"),
            })),
        new PermissionInfo(
            Name: "Emails.Create",
            Description: "Create emails permission",
            Resource: "Emails",
            Action: "Create",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("POST", "/api/v1/notifications/email", "Notification.Api"),
            })),
        new PermissionInfo(
            Name: "Emails.Read",
            Description: "Read emails permission",
            Resource: "Emails",
            Action: "Read",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("GET", "/api/v1/notifications/email/logs/{logId:guid}", "Notification.Api"),
                new EndpointMetadata("GET", "/api/v1/notifications/email/logs", "Notification.Api"),
            })),
        new PermissionInfo(
            Name: "Health.Read",
            Description: "Read health permission",
            Resource: "Health",
            Action: "Read",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("GET", "/api/v1/health", "Tenant.Api"),
            })),
        new PermissionInfo(
            Name: "Permissions.Create",
            Description: "Create permissions permission",
            Resource: "Permissions",
            Action: "Create",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("POST", "/api/v1/permissions/seed", "Auth.Api"),
            })),
        new PermissionInfo(
            Name: "Permissions.Read",
            Description: "Read permissions permission",
            Resource: "Permissions",
            Action: "Read",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("GET", "/api/v1/permissions", "Auth.Api"),
            })),
        new PermissionInfo(
            Name: "Roles.Create",
            Description: "Create roles permission",
            Resource: "Roles",
            Action: "Create",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("POST", "/api/v1/users/{userId:guid}/roles", "Auth.Api"),
                new EndpointMetadata("POST", "/api/v1/roles", "Auth.Api"),
            })),
        new PermissionInfo(
            Name: "Roles.Delete",
            Description: "Delete roles permission",
            Resource: "Roles",
            Action: "Delete",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("DELETE", "/api/v1/roles/{roleId:guid}", "Auth.Api"),
                new EndpointMetadata("DELETE", "/api/v1/users/{userId:guid}/roles/{roleId:guid}", "Auth.Api"),
            })),
        new PermissionInfo(
            Name: "Roles.Read",
            Description: "Read roles permission",
            Resource: "Roles",
            Action: "Read",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("GET", "/api/v1/roles/{roleId:guid}", "Auth.Api"),
                new EndpointMetadata("GET", "/api/v1/roles", "Auth.Api"),
                new EndpointMetadata("GET", "/api/v1/users/{userId:guid}/permissions", "Auth.Api"),
                new EndpointMetadata("GET", "/api/v1/users/{userId:guid}/roles", "Auth.Api"),
            })),
        new PermissionInfo(
            Name: "Roles.Update",
            Description: "Update roles permission",
            Resource: "Roles",
            Action: "Update",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("PUT", "/api/v1/roles/{roleId:guid}", "Auth.Api"),
            })),
        new PermissionInfo(
            Name: "Sms.Create",
            Description: "Create sms permission",
            Resource: "Sms",
            Action: "Create",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("POST", "/api/v1/notifications/sms", "Notification.Api"),
            })),
        new PermissionInfo(
            Name: "Sms.Read",
            Description: "Read sms permission",
            Resource: "Sms",
            Action: "Read",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("GET", "/api/v1/notifications/sms/logs/{logId:guid}", "Notification.Api"),
                new EndpointMetadata("GET", "/api/v1/notifications/sms/logs", "Notification.Api"),
            })),
        new PermissionInfo(
            Name: "Templates.Create",
            Description: "Create templates permission",
            Resource: "Templates",
            Action: "Create",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("POST", "/api/v1/templates", "Notification.Api"),
            })),
        new PermissionInfo(
            Name: "Templates.Read",
            Description: "Read templates permission",
            Resource: "Templates",
            Action: "Read",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("GET", "/api/v1/templates/{templateId:guid}", "Notification.Api"),
                new EndpointMetadata("GET", "/api/v1/templates", "Notification.Api"),
            })),
        new PermissionInfo(
            Name: "TenantInvitations.Create",
            Description: "Create tenantınvitations permission",
            Resource: "TenantInvitations",
            Action: "Create",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("POST", "/api/v1/invitations/accept", "Tenant.Api"),
                new EndpointMetadata("POST", "/api/v1/tenants/{tenantId:guid}/invitations", "Tenant.Api"),
            })),
        new PermissionInfo(
            Name: "TenantInvitations.Delete",
            Description: "Delete tenantınvitations permission",
            Resource: "TenantInvitations",
            Action: "Delete",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("DELETE", "/api/v1/invitations/{invitationId:guid}", "Tenant.Api"),
            })),
        new PermissionInfo(
            Name: "TenantInvitations.Read",
            Description: "Read tenantınvitations permission",
            Resource: "TenantInvitations",
            Action: "Read",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("GET", "/api/v1/tenants/{tenantId:guid}/invitations", "Tenant.Api"),
            })),
        new PermissionInfo(
            Name: "Tenants.Create",
            Description: "Create tenants permission",
            Resource: "Tenants",
            Action: "Create",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("POST", "/api/v1/tenants", "Tenant.Api"),
            })),
        new PermissionInfo(
            Name: "Tenants.Delete",
            Description: "Delete tenants permission",
            Resource: "Tenants",
            Action: "Delete",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("DELETE", "/api/v1/tenants/{tenantId:guid}", "Tenant.Api"),
            })),
        new PermissionInfo(
            Name: "Tenants.Read",
            Description: "Read tenants permission",
            Resource: "Tenants",
            Action: "Read",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("GET", "/api/v1/tenants/{tenantId:guid}", "Tenant.Api"),
                new EndpointMetadata("GET", "/api/v1/tenants", "Tenant.Api"),
            })),
        new PermissionInfo(
            Name: "Tenants.Update",
            Description: "Update tenants permission",
            Resource: "Tenants",
            Action: "Update",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("PUT", "/api/v1/tenants/{tenantId:guid}", "Tenant.Api"),
            })),
        new PermissionInfo(
            Name: "TenantSettings.Read",
            Description: "Read tenantsettings permission",
            Resource: "TenantSettings",
            Action: "Read",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("GET", "/api/v1/tenants/{tenantId:guid}/settings", "Tenant.Api"),
            })),
        new PermissionInfo(
            Name: "TenantSettings.Update",
            Description: "Update tenantsettings permission",
            Resource: "TenantSettings",
            Action: "Update",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("PUT", "/api/v1/tenants/{tenantId:guid}/settings", "Tenant.Api"),
            })),
        new PermissionInfo(
            Name: "UserProfiles.Create",
            Description: "Create userprofiles permission",
            Resource: "UserProfiles",
            Action: "Create",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("POST", "/api/v1/users/me/password", "Auth.Api"),
            })),
        new PermissionInfo(
            Name: "UserProfiles.Read",
            Description: "Read userprofiles permission",
            Resource: "UserProfiles",
            Action: "Read",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("GET", "/api/v1/users/me", "Auth.Api"),
            })),
        new PermissionInfo(
            Name: "UserProfiles.Update",
            Description: "Update userprofiles permission",
            Resource: "UserProfiles",
            Action: "Update",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("PUT", "/api/v1/users/me", "Auth.Api"),
            })),
        new PermissionInfo(
            Name: "Users.Create",
            Description: "Create users permission",
            Resource: "Users",
            Action: "Create",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("POST", "/api/v1/users", "Auth.Api"),
                new EndpointMetadata("POST", "/api/v1/tenants/{tenantId:guid}/users/{userId:guid}/deactivate", "Auth.Api"),
                new EndpointMetadata("POST", "/api/v1/tenants/{tenantId:guid}/users/{userId:guid}/reactivate", "Auth.Api"),
            })),
        new PermissionInfo(
            Name: "Users.Delete",
            Description: "Delete users permission",
            Resource: "Users",
            Action: "Delete",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("DELETE", "/api/v1/tenants/{tenantId:guid}/users/{userId:guid}", "Auth.Api"),
            })),
        new PermissionInfo(
            Name: "Users.Read",
            Description: "Read users permission",
            Resource: "Users",
            Action: "Read",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("GET", "/api/v1/users/{userId:guid}", "Auth.Api"),
            })),
        new PermissionInfo(
            Name: "Users.Update",
            Description: "Update users permission",
            Resource: "Users",
            Action: "Update",
            Endpoints: new ReadOnlyCollection<EndpointMetadata>(new[]
            {
                new EndpointMetadata("PUT", "/api/v1/users/{userId:guid}", "Auth.Api"),
            })),
    });

    /// <summary>
    /// Get all permissions for a specific resource
    /// </summary>
    public static IReadOnlyList<PermissionInfo> GetByResource(string resource)
        => All.Where(p => p.Resource.Equals(resource, StringComparison.OrdinalIgnoreCase)).ToList().AsReadOnly();

    /// <summary>
    /// Get all permissions for a specific action
    /// </summary>
    public static IReadOnlyList<PermissionInfo> GetByAction(string action)
        => All.Where(p => p.Action.Equals(action, StringComparison.OrdinalIgnoreCase)).ToList().AsReadOnly();

    /// <summary>
    /// Get all permissions for a specific project
    /// </summary>
    public static IReadOnlyList<PermissionInfo> GetByProject(string project)
        => All.Where(p => p.Endpoints.Any(e => e.Project.Equals(project, StringComparison.OrdinalIgnoreCase))).ToList().AsReadOnly();

    /// <summary>
    /// Check if a permission exists
    /// </summary>
    public static bool Exists(string permissionName)
        => All.Any(p => p.Name.Equals(permissionName, StringComparison.OrdinalIgnoreCase));

    /// <summary>
    /// Permission statistics
    /// </summary>
    public static class Statistics
    {
        /// <summary>Total number of permissions</summary>
        public const int TotalPermissions = 31;

        /// <summary>Total number of unique resources</summary>
        public const int TotalResources = 12;

        /// <summary>Total number of unique actions</summary>
        public const int TotalActions = 4;

        /// <summary>Total number of endpoints</summary>
        public static int TotalEndpoints => All.Sum(p => p.EndpointCount);

        /// <summary>Generation timestamp</summary>
        public static readonly DateTime GeneratedAt = DateTime.Parse("2025-07-12 17:15:57").ToUniversalTime();
    }
}
